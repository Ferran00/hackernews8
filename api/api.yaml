
openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for our Hacker News clone's REST API, deployed at <https://arcane-journey-15614.herokuapp.com/>. <br><br><br>brrrr COMPLETAR!<br><br>All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the tweet."
servers:
  #heroku. comentar aquest i posar el vostre a la altra linea per a testejar a AWS
  - url: 'https://arcane-journey-15614.herokuapp.com/api/'
  #- url: 'http://3.92.166.19:8080/api/'  #inserir aqui la IP del vostre Cloud9
  #http://3.86.16.176/api/
paths:
  /news/{id}:
    get:
      tags:
      - news
      summary: Returns a specific new
      description: Returns a specific new, identified by id
      operationId: getInfoNew
      parameters:
      - name: id
        in: path
        description: ID of the new to return
        required: true  #not sure. potser tindrem un get /news per llistes? 
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/New'
        404:
          description: 'Error: New not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
    
  /news/upvote:
    post:
      tags:
      - upvotes
      summary: Upvote a specific new
      description: Upvote a specific new, identified by the newid parameter
      operationId: 'news#upvote'
      parameters:
      - name: newid
        in: query
        description: ID of the new to upvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
        
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:     #not sure de si les propietats son aquestes
                  status:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: 'New with ID 3 upvoted successfully'
          
        409:
          description: 'conflict: New has already been upvoted by user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409voteNew'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no newid specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteNew'
         
    delete:
      tags:
      - upvotes
      summary: Unvote a specific new
      description: Unvote a specific new (remove the vote). The new is identified by the newid parameter
      operationId: 'news#unvote'
      parameters:
      - name: newid
        in: query
        description: ID of the new to unvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        204:
          description: success    #en principi no té body. esperant mail lidia
        404:
          description: error. User has not upvoted a new with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no newid specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteNew'
  
  
  /news/new:
    get:
      tags:
      - news
      summary: Returns a list of newest url news
      description: Returns a list of newest url news
      operationId: getNewNews
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'
    
  
  
  /news/ask:
    get:
      tags:
      - news
      summary: Returns a list of ask  news
      description: Returns a list of ask news
      operationId: getAskNews
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'


  /comments/upvote:
    post:
      tags:
      - comments
      summary: Upvote a specific comment
      description: Upvote a specific comment, identified by the comment_id parameter
      operationId: 'comments#upvote'
      parameters:
      - name: comment_id
        in: query
        description: ID of the comment to upvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
        
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:     #not sure de si les propietats son aquestes
                  status:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: 'Comment with ID 3 upvoted successfully'
          
        409:
          description: 'conflict: Comment has already been upvoted by user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409voteComment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no comment_id specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteComment'
         
    delete:
      tags:
      - comments
      summary: Unvote a specific comment
      description: Unvote a specific comment (remove the vote). The comment is identified by the comment_id parameter
      operationId: unvote
      parameters:
      - name: comment_id
        in: query
        description: ID of the comment to unvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        204:
          description: success    #en principi no té body. esperant mail lidia
        404:
          description: error. User has not upvoted a comment with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404voteComment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no comment_id specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteComment'
 
 
components:
  schemas:    #per quan vols mostrar un schema
    New:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        title:
          type: string
          example: 'Amazing new title'
        url:
          type: string
          example: 'https://web.whatsapp.com/'
        text:
          type: string  #suposo q al json sera string. era de tipus text
          example: 'this is a text. hey'
        isurl:
          type: integer
          format: int64
          example: 1
        points:
          type: integer
          format: int64
          example: 70
        created_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        updated_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        user_id:
          type: integer
          format: int64
          example: 4
          
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
          
  examples:    #per quan vols mostrar un exemple
    error400voteNew:
      value:
        status: 400
        error: "Bad Request"
        message: "no newid specified (query)"
    error400voteComment:
      value:
        status: 400
        error: "Bad Request"
        message: "no comment_id specified (query)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "Invalid API key"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Privilege not granted"
    error404new:
      value:
        status: 404
        error: "Not Found"
        message: "No New with that ID"
    error404voteComment:
      value:
        status: 404
        error: "Not Found"
        message: "No Comment with that ID"
    error409voteNew:
      value:
        status: 409
        error: "Conflict"
        message: "New with ID 43 has already been upvoted by user"
    error409voteComment:
      value:
        status: 409
        error: "Conflict"
        message: "Comment with ID 130 has already been upvoted by user"
