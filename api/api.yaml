
openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for our Hacker News clone's REST API, deployed at <https://arcane-journey-15614.herokuapp.com/>. <br><br><br>brrrr COMPLETAR!<br><br>All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the tweet."
servers:
  #heroku. comentar aquest i posar el vostre a la altra linea per a testejar a AWS
  #- url: 'https://arcane-journey-15614.herokuapp.com/api/'
  - url: 'http://52.90.217.162:8080/api/'  #inserir aqui la IP del vostre Cloud9
  #http://3.86.16.176/api/
paths:
  /news/{id}:
    get:
      tags:
      - news
      summary: Returns a specific new
      description: Returns a specific new, identified by id; with its thread of comments.
      operationId: getInfoNew
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: ID of the new to return
        required: true
        schema:
          type: integer
          format: int64 #nose
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewWithComments'
        404:
          description: 'Error: New not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /news/new:
    get:
      tags:
      - news
      summary: Returns a list of newest url news
      description: Returns a list of newest url news
      operationId: getNewNews
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'
        404:
          description: error. User has not upvoted a new with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /news/ask:
    get:
      tags:
      - news
      summary: Returns a list of ask news
      description: Returns a list of ask news
      operationId: getAskNews
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'
        404:
          description: error. User has not upvoted a new with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /news/upvoted:
    get:
      tags:
      - news
      summary: Returns a list of the news upvoted by the user
      description: Returns a list of the news upvoted by the user identified by the auth. token
      operationId: newsUpvotedByUser
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /news:
    get:
      tags:
      - news
      summary: Returns a list of the news
      description: Returns a list of the url type news in the system in desecent order by points 
      operationId: getNews
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'

    post:
      tags:
      - news
      summary: Create a new 
      description: Create a url new, ask new.
      operationId: create
      requestBody:
        description: Provide the title, url and text of the new to submit. <br> Prodiving only the text without a URL will create a new of the ASK type. <br> providing a URL will create a new of the URL type. If both a URL and a text are provided, the text will be posted as a comment on the new.
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  example: 'Amazing new technology'
                url:
                  type: string
                  minLength: 1
                  example: 'https://github.com/Ferran00/hackernews8/issues'
                text:
                  type: string
                  minLength: 1
                  example: 'this is a text asking some kind of tech question'
        required: true
        
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        201:
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/New'
        
        409: 
          description: Url already exists
          content: 
              application/json: 
                schema: 
                  type: object
                  properties: 
                    status: 
                      type: integer
                      example: 409
                    message: 
                      type: string
                      example: "New with same URL already exists"
            
        400: 
          description: Title is blank or url and text fields are blank
          content:
            application/json: 
                schema: 
                  type: object
                  properties: 
                    status: 
                      type: integer
                      example: 400
                    message: 
                      type: string
                      example: "Title is blank or url and text fields are blank"
              
              
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
                  

  /news/upvote:
    post:
      tags:
      - news
      summary: Upvote a specific new
      description: Upvote a specific new, identified by the newid parameter
      operationId: upvote
      requestBody:
        description: Provide the id of the new you want to upvote
        content:
          application/json:
            schema:
              required:
              - newid
              type: object
              properties:
                newid:
                  type: integer
                  minLength: 1
                  example: 2
        required: true
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
        
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:     #not sure de si les propietats son aquestes
                  status:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: 'New with ID 2 upvoted successfully'
          
        409:
          description: 'conflict: New has already been upvoted by user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409voteNew'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no newid specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteNew'
         
    delete:
      tags:
      - news
      summary: Unvote a specific new
      description: Unvote a specific new (remove the vote). The new is identified by the newid parameter
      operationId: unvote
      parameters:
      - name: newid
        in: query
        description: ID of the new to unvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        204:
          description: success
        404:
          description: error. User has not upvoted a new with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404new'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no newid specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteNew'

  /users/profile:
    put:
      tags:
      - users
      summary: Update About and email attributes of a user
      description: Update About and email attributes of the authed user and returns the attributes of that user
      operationId: updateProfile
      requestBody:
        description: Provide the new email or the new about you want to put on your profile
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                  example: "thisismyemail@gmail.com"
                about:
                  type: string
                  minLength: 1
                  example: "This is my About, Hello HackerNews!"
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
    
    get:
      tags:
      - users
      summary: Show the user's information
      description: Show the information of the auth user (my information as user).
      operationId: getProfile
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResult'
               examples:
                 errorExample:
                  $ref: '#/components/examples/error401invalid'
    
                
  /users/otherprofile/{id}:
    get:
      tags:
      - users
      summary: Show the information of a specific user
      description: Show the information of a specific user (other user). The user is identified by the id parameter
      operationId: getOtherProfile
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id of the user whose profile information is to be obtained
        required: true
        schema:
          type: string
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/OtherUser'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResult'
               examples:
                 errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'No email specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400email'
                  
  /users/news/{id}:
    get:
      tags:
      - users
      summary: Returns a list of user news 
      description: Returns a list user news by the user identified with the specified id
      operationId: getUserNews
      parameters:
        - name: token
          in: header
          description: user's auth. token (API key)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the user whose threads are to be obtained
          required: true
          schema:
            type: integer
            format: int64
            
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/New'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: error. No user with that email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404user'
                  
        400:
          description: 'no email specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400email'
                  
  /comments/threads/{id}:
    get:
      tags:
      - comments
      summary: Returns a list of user comments
      description: Returns a list of user comments either by the authed user or by the specified email
      operationId: threads
      parameters:
        - name: token
          in: header
          description: user's auth. token (API key)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the user whose threads are to be obtained
          required: true
          schema:
            type: integer
            format: int64
            
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: error. No user with that email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404user'
                  
                  
  /comments/upvoted:
    get:
      tags:
      - comments
      summary: Returns a list of the comments upvoted by the user
      description: Returns a list of the comments upvoted by the user identified by the auth. token
      operationId: commentsUpvotedByUser
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /reply:
    post:
      tags:
        - comments
      summary: Create a reply to a comment 
      description: Create a reply to a comment
      operationId: createReply
      requestBody:
        description: Provide the text of the reply and the id of the comment you want to comment.
        content:
          application/json:
            schema:
              required:
              - new_id
              type: object
              properties:
                comment_id:
                  type: integer
                  minLength: 1
                  example: 1
                text:
                  type: string
                  minLength: 1
                  example: 'This comment is so offensive! You may delete it'
        required: true
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        201:
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        
        400: 
          description: The text or the new_id provided are blank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400comment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
  
  /comment:
    post:
      tags:
        - comments
      summary: Create a comment 
      description: Create a comment on a new
      operationId: createComment
      requestBody:
        description: Provide the text of the comment and the id of the new you want to comment.
        content:
          application/json:
            schema:
              required:
              - comment_id
              type: object
              properties:
                new_id:
                  type: integer
                  minLength: 1
                  example: 1
                text:
                  type: string
                  minLength: 1
                  example: 'This post is incredible! Thank you for the info'
        required: true
      parameters:
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        201:
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        
        400: 
          description: The text or the new_id provided are blank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400comment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'


  /comments/upvote:
    post:
      tags:
      - comments
      summary: Upvote a specific comment
      description: Upvote a specific comment, identified by the comment_id parameter
      operationId: 'comments#upvote'
      parameters:
      - name: comment_id
        in: query
        description: ID of the comment to upvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
        
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:     #not sure de si les propietats son aquestes
                  status:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: 'Comment with ID 3 upvoted successfully'
          
        409:
          description: 'conflict: Comment has already been upvoted by user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409voteComment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no comment_id specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteComment'
         
         
    delete:
      tags:
      - comments
      summary: Unvote a specific comment
      description: Unvote a specific comment (remove the vote). The comment is identified by the comment_id parameter
      operationId: 'comments#unvote'
      parameters:
      - name: comment_id
        in: query
        description: ID of the comment to unvote
        required: true
        schema:
          type: integer
          format: int64 #nose
      - name: token
        in: header
        description: user's auth. token (API key)
        required: true
        schema:
          type: string
      responses:
        204:
          description: success    #en principi no té body. esperant mail lidia
        404:
          description: error. User has not upvoted a comment with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404voteComment'
        401:
          description: 'Unauthorized: Invalid API key or no API key provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        400:
          description: 'no comment_id specified (query)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400voteComment'
                  
      
 
 
components:
  schemas:    #per quan vols mostrar un schema
    New:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        title:
          type: string
          example: 'Amazing new title'
        url:
          type: string
          example: 'https://web.whatsapp.com/'
        text:
          type: string  #suposo q al json sera string. era de tipus text
          example: 'this is a text. hey'
        isurl:
          type: integer
          format: int64
          example: 1
        points:
          type: integer
          format: int64
          example: 70
        created_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        updated_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        user_id:
          type: integer
          format: int64
          example: 4
          
      
    NewWithComments:
      type: object
      properties:
        new:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 3
            title:
              type: string
              example: 'Amazing new title'
            url:
              type: string
              example: 'https://web.whatsapp.com/'
            text:
              type: string  #suposo q al json sera string. era de tipus text
              example: 'this is a text. hey'
            isurl:
              type: integer
              format: int64
              example: 1
            points:
              type: integer
              format: int64
              example: 70
            created_at:
              type: string
              format: date-time
              example: '2021-05-05 15:47:32.238268000 +0000'
            updated_at:
              type: string
              format: date-time
              example: '2021-05-05 15:47:32.238268000 +0000'
            user_id:
              type: integer
              format: int64
              example: 4
        comments:
          type: object
          properties:
            comment:
              type: object
              properties:
                id: 
                  type: integer
                  example: 2
                text:
                  type: string
                  example: "M'ha agradat molt la teva aportació al fòrum de l'assignatura. Aquí tens una píndola."
                created_at:
                  type: string
                  format: date-time
                  example: '2021-05-05 15:47:32.238268000 +0000'
                updated_at:
                  type: string
                  format: date-time
                  example: '2021-05-05 15:47:32.238268000 +0000'
                user_id:
                  type: integer
                  format: int64
                  example: 4
                comment_id:
                  type: integer
                  example: 13
                new_id:
                  type: integer
                  example: 2
            replies:
              type: object
          
    Comment:
      type: object
      properties:
        id: 
          type: integer
          example: 2
        text:
          type: string
          example: "M'ha agradat molt la teva aportació al fòrum de l'assignatura. Aquí tens una píndola."
        created_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        updated_at:
          type: string
          format: date-time
          example: '2021-05-05 15:47:32.238268000 +0000'
        user_id:
          type: integer
          format: int64
          example: 4
        comment_id:
          type: integer
          example: 13
        new_id:
          type: integer
          example: 2
    
    User:
      type: object
      properties:
        username:
          type: string
          example: "patrick321"
        created_at:
          type: string
          format: date-time
          example: "2021-05-03T18:45:40.168Z"
        karma:
          type: integer
          example: 4
        about:
          type: string
          format: text
          example: "This is my About. Buenas tardes soy Patricio"
        email:
          type: string
          format: email
          example: "patricioestrella@gmail.com"
        api_key:
          type: string
          example: "hp7L4WPsHaWK4RDzeh37sVAu"
        id:
          type: integer
          format: int64
          example: 1
    
    OtherUser:
      type: object
      properties:
        username:
          type: string
          example: "patrick321"
        created_at:
          type: string
          format: date-time
          example: "2021-05-03T18:45:40.168Z"
        karma:
          type: integer
          example: 4
        about:
          type: string
          format: text
          example: "This is my About. Buenas tardes soy Patricio"
        email:
          type: string
          format: email
          example: "patricioestrella@gmail.com"
          
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
          
  examples:    #per quan vols mostrar un exemple
    error400voteNew:
      value:
        status: 400
        error: "Bad Request"
        message: "No new_id specified (query)"
    error400voteComment:
      value:
        status: 400
        error: "Bad Request"
        message: "No comment_id specified (query)"
    error400email:
      value:
        status: 400
        error: "Bad Request"
        message: "No email specified (query)"
    error400comment:
      value:
        status: 400
        error: "Bad Request"
        message: "The text or the new_id provided are blank (query)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "The authentication token is not provided"
    error401invalid:
      value:
        status: 401
        error: "Unauthorized"
        message: "Invalid API key"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Privilege not granted"
    error404new:
      value:
        status: 404
        error: "Not Found"
        message: "No New with that ID"
    error404voteComment:
      value:
        status: 404
        error: "Not Found"
        message: "No Comment with that ID"
    error404user:
      value:
        status: 404
        error: "Not Found"
        message: "No User with that email"
    error409voteNew:
      value:
        status: 409
        error: "Conflict"
        message: "New with ID 43 has already been upvoted by user"
    error409voteComment:
      value:
        status: 409
        error: "Conflict"
        message: "Comment with ID 130 has already been upvoted by user"
